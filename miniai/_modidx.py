# Autogenerated by nbdev

d = { 'settings': { 'branch': 'master',
                'doc_baseurl': '/course22p2',
                'doc_host': 'https://fastai.github.io',
                'git_url': 'https://github.com/fastai/course22p2',
                'lib_path': 'miniai'},
  'syms': { 'miniai.accel': { 'miniai.accel.AccelerateCB': ('ddpm_v2.html#acceleratecb', 'miniai/accel.py'),
                              'miniai.accel.AccelerateCB.__init__': ('ddpm_v2.html#acceleratecb.__init__', 'miniai/accel.py'),
                              'miniai.accel.AccelerateCB.backward': ('ddpm_v2.html#acceleratecb.backward', 'miniai/accel.py'),
                              'miniai.accel.AccelerateCB.before_fit': ('ddpm_v2.html#acceleratecb.before_fit', 'miniai/accel.py'),
                              'miniai.accel.MixedPrecision': ('ddpm_v2.html#mixedprecision', 'miniai/accel.py'),
                              'miniai.accel.MixedPrecision.after_loss': ('ddpm_v2.html#mixedprecision.after_loss', 'miniai/accel.py'),
                              'miniai.accel.MixedPrecision.backward': ('ddpm_v2.html#mixedprecision.backward', 'miniai/accel.py'),
                              'miniai.accel.MixedPrecision.before_batch': ('ddpm_v2.html#mixedprecision.before_batch', 'miniai/accel.py'),
                              'miniai.accel.MixedPrecision.before_fit': ('ddpm_v2.html#mixedprecision.before_fit', 'miniai/accel.py'),
                              'miniai.accel.MixedPrecision.step': ('ddpm_v2.html#mixedprecision.step', 'miniai/accel.py')},
            'miniai.activations': { 'miniai.activations.ActivationStats': ('activations.html#activationstats', 'miniai/activations.py'),
                                    'miniai.activations.ActivationStats.__init__': ( 'activations.html#activationstats.__init__',
                                                                                     'miniai/activations.py'),
                                    'miniai.activations.ActivationStats.color_dim': ( 'activations.html#activationstats.color_dim',
                                                                                      'miniai/activations.py'),
                                    'miniai.activations.ActivationStats.dead_chart': ( 'activations.html#activationstats.dead_chart',
                                                                                       'miniai/activations.py'),
                                    'miniai.activations.ActivationStats.plot_stats': ( 'activations.html#activationstats.plot_stats',
                                                                                       'miniai/activations.py'),
                                    'miniai.activations.Hook': ('activations.html#hook', 'miniai/activations.py'),
                                    'miniai.activations.Hook.__del__': ('activations.html#hook.__del__', 'miniai/activations.py'),
                                    'miniai.activations.Hook.__init__': ('activations.html#hook.__init__', 'miniai/activations.py'),
                                    'miniai.activations.Hook.remove': ('activations.html#hook.remove', 'miniai/activations.py'),
                                    'miniai.activations.Hooks': ('activations.html#hooks', 'miniai/activations.py'),
                                    'miniai.activations.Hooks.__del__': ('activations.html#hooks.__del__', 'miniai/activations.py'),
                                    'miniai.activations.Hooks.__delitem__': ('activations.html#hooks.__delitem__', 'miniai/activations.py'),
                                    'miniai.activations.Hooks.__enter__': ('activations.html#hooks.__enter__', 'miniai/activations.py'),
                                    'miniai.activations.Hooks.__exit__': ('activations.html#hooks.__exit__', 'miniai/activations.py'),
                                    'miniai.activations.Hooks.__init__': ('activations.html#hooks.__init__', 'miniai/activations.py'),
                                    'miniai.activations.Hooks.remove': ('activations.html#hooks.remove', 'miniai/activations.py'),
                                    'miniai.activations.HooksCallback': ('activations.html#hookscallback', 'miniai/activations.py'),
                                    'miniai.activations.HooksCallback.__init__': ( 'activations.html#hookscallback.__init__',
                                                                                   'miniai/activations.py'),
                                    'miniai.activations.HooksCallback.__iter__': ( 'activations.html#hookscallback.__iter__',
                                                                                   'miniai/activations.py'),
                                    'miniai.activations.HooksCallback.__len__': ( 'activations.html#hookscallback.__len__',
                                                                                  'miniai/activations.py'),
                                    'miniai.activations.HooksCallback._hookfunc': ( 'activations.html#hookscallback._hookfunc',
                                                                                    'miniai/activations.py'),
                                    'miniai.activations.HooksCallback.after_fit': ( 'activations.html#hookscallback.after_fit',
                                                                                    'miniai/activations.py'),
                                    'miniai.activations.HooksCallback.before_fit': ( 'activations.html#hookscallback.before_fit',
                                                                                     'miniai/activations.py'),
                                    'miniai.activations.append_stats': ('activations.html#append_stats', 'miniai/activations.py'),
                                    'miniai.activations.get_hist': ('activations.html#get_hist', 'miniai/activations.py'),
                                    'miniai.activations.get_min': ('activations.html#get_min', 'miniai/activations.py'),
                                    'miniai.activations.set_seed': ('activations.html#set_seed', 'miniai/activations.py')},
            'miniai.augment': { 'miniai.augment.CapturePreds': ('augment.html#capturepreds', 'miniai/augment.py'),
                                'miniai.augment.CapturePreds.after_batch': ('augment.html#capturepreds.after_batch', 'miniai/augment.py'),
                                'miniai.augment.CapturePreds.after_fit': ('augment.html#capturepreds.after_fit', 'miniai/augment.py'),
                                'miniai.augment.CapturePreds.before_fit': ('augment.html#capturepreds.before_fit', 'miniai/augment.py'),
                                'miniai.augment.RandCopy': ('augment.html#randcopy', 'miniai/augment.py'),
                                'miniai.augment.RandCopy.__init__': ('augment.html#randcopy.__init__', 'miniai/augment.py'),
                                'miniai.augment.RandCopy.forward': ('augment.html#randcopy.forward', 'miniai/augment.py'),
                                'miniai.augment.RandErase': ('augment.html#randerase', 'miniai/augment.py'),
                                'miniai.augment.RandErase.__init__': ('augment.html#randerase.__init__', 'miniai/augment.py'),
                                'miniai.augment.RandErase.forward': ('augment.html#randerase.forward', 'miniai/augment.py'),
                                'miniai.augment._flops': ('augment.html#_flops', 'miniai/augment.py'),
                                'miniai.augment._rand_copy1': ('augment.html#_rand_copy1', 'miniai/augment.py'),
                                'miniai.augment._rand_erase1': ('augment.html#_rand_erase1', 'miniai/augment.py'),
                                'miniai.augment.capture_preds': ('augment.html#capture_preds', 'miniai/augment.py'),
                                'miniai.augment.rand_copy': ('augment.html#rand_copy', 'miniai/augment.py'),
                                'miniai.augment.rand_erase': ('augment.html#rand_erase', 'miniai/augment.py'),
                                'miniai.augment.show_image_batch': ('augment.html#show_image_batch', 'miniai/augment.py'),
                                'miniai.augment.summary': ('augment.html#summary', 'miniai/augment.py')},
            'miniai.challange.ct94ep5': { 'miniai.challange.ct94ep5.CustomDataLoader': ( 'contest/ct_curriculum/ct94.9_rerun-speed.html#customdataloader',
                                                                                         'miniai/challange/ct94ep5.py'),
                                          'miniai.challange.ct94ep5.CustomDataLoader.__init__': ( 'contest/ct_curriculum/ct94.9_rerun-speed.html#customdataloader.__init__',
                                                                                                  'miniai/challange/ct94ep5.py'),
                                          'miniai.challange.ct94ep5.CustomDataLoader.from_dd': ( 'contest/ct_curriculum/ct94.9_rerun-speed.html#customdataloader.from_dd',
                                                                                                 'miniai/challange/ct94ep5.py'),
                                          'miniai.challange.ct94ep5.CustomDataLoader.get_sampler': ( 'contest/ct_curriculum/ct94.9_rerun-speed.html#customdataloader.get_sampler',
                                                                                                     'miniai/challange/ct94ep5.py'),
                                          'miniai.challange.ct94ep5.CustomTrainingSampler': ( 'contest/ct_curriculum/ct94.9_rerun-speed.html#customtrainingsampler',
                                                                                              'miniai/challange/ct94ep5.py'),
                                          'miniai.challange.ct94ep5.CustomTrainingSampler.__init__': ( 'contest/ct_curriculum/ct94.9_rerun-speed.html#customtrainingsampler.__init__',
                                                                                                       'miniai/challange/ct94ep5.py'),
                                          'miniai.challange.ct94ep5.CustomTrainingSampler.__iter__': ( 'contest/ct_curriculum/ct94.9_rerun-speed.html#customtrainingsampler.__iter__',
                                                                                                       'miniai/challange/ct94ep5.py'),
                                          'miniai.challange.ct94ep5.CustomTrainingSampler.setup_epoch': ( 'contest/ct_curriculum/ct94.9_rerun-speed.html#customtrainingsampler.setup_epoch',
                                                                                                          'miniai/challange/ct94ep5.py'),
                                          'miniai.challange.ct94ep5.Mish': ( 'contest/ct_curriculum/ct94.9_rerun-speed.html#mish',
                                                                             'miniai/challange/ct94ep5.py'),
                                          'miniai.challange.ct94ep5.Mish.__init__': ( 'contest/ct_curriculum/ct94.9_rerun-speed.html#mish.__init__',
                                                                                      'miniai/challange/ct94ep5.py'),
                                          'miniai.challange.ct94ep5.Mish.forward': ( 'contest/ct_curriculum/ct94.9_rerun-speed.html#mish.forward',
                                                                                     'miniai/challange/ct94ep5.py'),
                                          'miniai.challange.ct94ep5.TopLossesCallback': ( 'contest/ct_curriculum/ct94.9_rerun-speed.html#toplossescallback',
                                                                                          'miniai/challange/ct94ep5.py'),
                                          'miniai.challange.ct94ep5.TopLossesCallback.__init__': ( 'contest/ct_curriculum/ct94.9_rerun-speed.html#toplossescallback.__init__',
                                                                                                   'miniai/challange/ct94ep5.py'),
                                          'miniai.challange.ct94ep5.TopLossesCallback._calculate_top_losses': ( 'contest/ct_curriculum/ct94.9_rerun-speed.html#toplossescallback._calculate_top_losses',
                                                                                                                'miniai/challange/ct94ep5.py'),
                                          'miniai.challange.ct94ep5.TopLossesCallback.after_batch': ( 'contest/ct_curriculum/ct94.9_rerun-speed.html#toplossescallback.after_batch',
                                                                                                      'miniai/challange/ct94ep5.py'),
                                          'miniai.challange.ct94ep5.TopLossesCallback.after_epoch': ( 'contest/ct_curriculum/ct94.9_rerun-speed.html#toplossescallback.after_epoch',
                                                                                                      'miniai/challange/ct94ep5.py'),
                                          'miniai.challange.ct94ep5.TopLossesCallback.before_epoch': ( 'contest/ct_curriculum/ct94.9_rerun-speed.html#toplossescallback.before_epoch',
                                                                                                       'miniai/challange/ct94ep5.py'),
                                          'miniai.challange.ct94ep5.TopLossesCallback.before_fit': ( 'contest/ct_curriculum/ct94.9_rerun-speed.html#toplossescallback.before_fit',
                                                                                                     'miniai/challange/ct94ep5.py'),
                                          'miniai.challange.ct94ep5.get_model9': ( 'contest/ct_curriculum/ct94.9_rerun-speed.html#get_model9',
                                                                                   'miniai/challange/ct94ep5.py'),
                                          'miniai.challange.ct94ep5.replace_top_losess': ( 'contest/ct_curriculum/ct94.9_rerun-speed.html#replace_top_losess',
                                                                                           'miniai/challange/ct94ep5.py')},
            'miniai.conv': { 'miniai.conv.collate_device': ('convolutions.html#collate_device', 'miniai/conv.py'),
                             'miniai.conv.conv': ('convolutions.html#conv', 'miniai/conv.py'),
                             'miniai.conv.to_device': ('convolutions.html#to_device', 'miniai/conv.py')},
            'miniai.datasets': { 'miniai.datasets.DataLoaders': ('datasets.html#dataloaders', 'miniai/datasets.py'),
                                 'miniai.datasets.DataLoaders.__init__': ('datasets.html#dataloaders.__init__', 'miniai/datasets.py'),
                                 'miniai.datasets.DataLoaders.from_dd': ('datasets.html#dataloaders.from_dd', 'miniai/datasets.py'),
                                 'miniai.datasets.collate_dict': ('datasets.html#collate_dict', 'miniai/datasets.py'),
                                 'miniai.datasets.get_grid': ('datasets.html#get_grid', 'miniai/datasets.py'),
                                 'miniai.datasets.inplace': ('datasets.html#inplace', 'miniai/datasets.py'),
                                 'miniai.datasets.show_image': ('datasets.html#show_image', 'miniai/datasets.py'),
                                 'miniai.datasets.show_images': ('datasets.html#show_images', 'miniai/datasets.py'),
                                 'miniai.datasets.subplots': ('datasets.html#subplots', 'miniai/datasets.py')},
            'miniai.fid': { 'miniai.fid.ImageEval': ('fid.html#imageeval', 'miniai/fid.py'),
                            'miniai.fid.ImageEval.__init__': ('fid.html#imageeval.__init__', 'miniai/fid.py'),
                            'miniai.fid.ImageEval.fid': ('fid.html#imageeval.fid', 'miniai/fid.py'),
                            'miniai.fid.ImageEval.get_feats': ('fid.html#imageeval.get_feats', 'miniai/fid.py'),
                            'miniai.fid.ImageEval.kid': ('fid.html#imageeval.kid', 'miniai/fid.py'),
                            'miniai.fid._calc_fid': ('fid.html#_calc_fid', 'miniai/fid.py'),
                            'miniai.fid._calc_kid': ('fid.html#_calc_kid', 'miniai/fid.py'),
                            'miniai.fid._calc_stats': ('fid.html#_calc_stats', 'miniai/fid.py'),
                            'miniai.fid._sqrtm_newton_schulz': ('fid.html#_sqrtm_newton_schulz', 'miniai/fid.py'),
                            'miniai.fid._squared_mmd': ('fid.html#_squared_mmd', 'miniai/fid.py')},
            'miniai.init': { 'miniai.init.BatchTransformCB': ('initializing.html#batchtransformcb', 'miniai/init.py'),
                             'miniai.init.BatchTransformCB.__init__': ('initializing.html#batchtransformcb.__init__', 'miniai/init.py'),
                             'miniai.init.BatchTransformCB.before_batch': ( 'initializing.html#batchtransformcb.before_batch',
                                                                            'miniai/init.py'),
                             'miniai.init.GeneralRelu': ('initializing.html#generalrelu', 'miniai/init.py'),
                             'miniai.init.GeneralRelu.__init__': ('initializing.html#generalrelu.__init__', 'miniai/init.py'),
                             'miniai.init.GeneralRelu.forward': ('initializing.html#generalrelu.forward', 'miniai/init.py'),
                             'miniai.init._lsuv_stats': ('initializing.html#_lsuv_stats', 'miniai/init.py'),
                             'miniai.init.clean_ipython_hist': ('initializing.html#clean_ipython_hist', 'miniai/init.py'),
                             'miniai.init.clean_mem': ('initializing.html#clean_mem', 'miniai/init.py'),
                             'miniai.init.clean_tb': ('initializing.html#clean_tb', 'miniai/init.py'),
                             'miniai.init.conv': ('initializing.html#conv', 'miniai/init.py'),
                             'miniai.init.get_model': ('initializing.html#get_model', 'miniai/init.py'),
                             'miniai.init.init_weights': ('initializing.html#init_weights', 'miniai/init.py'),
                             'miniai.init.lsuv_init': ('initializing.html#lsuv_init', 'miniai/init.py'),
                             'miniai.init.plot_func': ('initializing.html#plot_func', 'miniai/init.py')},
            'miniai.init_find_gain': { 'miniai.init_find_gain.BatchTransformCB': ( 'initializing_finding_gain.html#batchtransformcb',
                                                                                   'miniai/init_find_gain.py'),
                                       'miniai.init_find_gain.BatchTransformCB.__init__': ( 'initializing_finding_gain.html#batchtransformcb.__init__',
                                                                                            'miniai/init_find_gain.py'),
                                       'miniai.init_find_gain.BatchTransformCB.before_batch': ( 'initializing_finding_gain.html#batchtransformcb.before_batch',
                                                                                                'miniai/init_find_gain.py'),
                                       'miniai.init_find_gain.GeneralGelu': ( 'initializing_finding_gain.html#generalgelu',
                                                                              'miniai/init_find_gain.py'),
                                       'miniai.init_find_gain.GeneralGelu.__init__': ( 'initializing_finding_gain.html#generalgelu.__init__',
                                                                                       'miniai/init_find_gain.py'),
                                       'miniai.init_find_gain.GeneralGelu.forward': ( 'initializing_finding_gain.html#generalgelu.forward',
                                                                                      'miniai/init_find_gain.py'),
                                       'miniai.init_find_gain.conv': ('initializing_finding_gain.html#conv', 'miniai/init_find_gain.py'),
                                       'miniai.init_find_gain.get_model': ( 'initializing_finding_gain.html#get_model',
                                                                            'miniai/init_find_gain.py'),
                                       'miniai.init_find_gain.init_weights': ( 'initializing_finding_gain.html#init_weights',
                                                                               'miniai/init_find_gain.py')},
            'miniai.init_lsuv': { 'miniai.init_lsuv.LSUVInit': ('initializing_lsuv.html#lsuvinit', 'miniai/init_lsuv.py'),
                                  'miniai.init_lsuv.LSUVInit.__init__': ('initializing_lsuv.html#lsuvinit.__init__', 'miniai/init_lsuv.py'),
                                  'miniai.init_lsuv.LSUVInit.before_batch': ( 'initializing_lsuv.html#lsuvinit.before_batch',
                                                                              'miniai/init_lsuv.py'),
                                  'miniai.init_lsuv._lsuv_stats': ('initializing_lsuv.html#_lsuv_stats', 'miniai/init_lsuv.py'),
                                  'miniai.init_lsuv.lsuv_init': ('initializing_lsuv.html#lsuv_init', 'miniai/init_lsuv.py'),
                                  'miniai.init_lsuv.lsuv_layers': ('initializing_lsuv.html#lsuv_layers', 'miniai/init_lsuv.py'),
                                  'miniai.init_lsuv.orthogonal_init': ('initializing_lsuv.html#orthogonal_init', 'miniai/init_lsuv.py'),
                                  'miniai.init_lsuv.orthogonal_init_paper': ( 'initializing_lsuv.html#orthogonal_init_paper',
                                                                              'miniai/init_lsuv.py'),
                                  'miniai.init_lsuv.svd_orthonormal': ('initializing_lsuv.html#svd_orthonormal', 'miniai/init_lsuv.py'),
                                  'miniai.init_lsuv.zero_bias': ('initializing_lsuv.html#zero_bias', 'miniai/init_lsuv.py')},
            'miniai.init_swish': { 'miniai.init_swish.BatchTransformCB': ( 'initializing_swish.html#batchtransformcb',
                                                                           'miniai/init_swish.py'),
                                   'miniai.init_swish.BatchTransformCB.__init__': ( 'initializing_swish.html#batchtransformcb.__init__',
                                                                                    'miniai/init_swish.py'),
                                   'miniai.init_swish.BatchTransformCB.before_batch': ( 'initializing_swish.html#batchtransformcb.before_batch',
                                                                                        'miniai/init_swish.py'),
                                   'miniai.init_swish.GeneralGelu': ('initializing_swish.html#generalgelu', 'miniai/init_swish.py'),
                                   'miniai.init_swish.GeneralGelu.__init__': ( 'initializing_swish.html#generalgelu.__init__',
                                                                               'miniai/init_swish.py'),
                                   'miniai.init_swish.GeneralGelu.forward': ( 'initializing_swish.html#generalgelu.forward',
                                                                              'miniai/init_swish.py'),
                                   'miniai.init_swish.conv': ('initializing_swish.html#conv', 'miniai/init_swish.py'),
                                   'miniai.init_swish.get_model': ('initializing_swish.html#get_model', 'miniai/init_swish.py'),
                                   'miniai.init_swish.init_weights': ('initializing_swish.html#init_weights', 'miniai/init_swish.py')},
            'miniai.init_zero': {},
            'miniai.learner': { 'miniai.learner.Callback': ('learner.html#callback', 'miniai/learner.py'),
                                'miniai.learner.CancelBatchException': ('learner.html#cancelbatchexception', 'miniai/learner.py'),
                                'miniai.learner.CancelEpochException': ('learner.html#cancelepochexception', 'miniai/learner.py'),
                                'miniai.learner.CancelFitException': ('learner.html#cancelfitexception', 'miniai/learner.py'),
                                'miniai.learner.DeviceCB': ('learner.html#devicecb', 'miniai/learner.py'),
                                'miniai.learner.DeviceCB.__init__': ('learner.html#devicecb.__init__', 'miniai/learner.py'),
                                'miniai.learner.DeviceCB.before_batch': ('learner.html#devicecb.before_batch', 'miniai/learner.py'),
                                'miniai.learner.DeviceCB.before_fit': ('learner.html#devicecb.before_fit', 'miniai/learner.py'),
                                'miniai.learner.LRFinderCB': ('learner.html#lrfindercb', 'miniai/learner.py'),
                                'miniai.learner.LRFinderCB.__init__': ('learner.html#lrfindercb.__init__', 'miniai/learner.py'),
                                'miniai.learner.LRFinderCB.after_batch': ('learner.html#lrfindercb.after_batch', 'miniai/learner.py'),
                                'miniai.learner.LRFinderCB.before_fit': ('learner.html#lrfindercb.before_fit', 'miniai/learner.py'),
                                'miniai.learner.LRFinderCB.cleanup_fit': ('learner.html#lrfindercb.cleanup_fit', 'miniai/learner.py'),
                                'miniai.learner.Learner': ('learner.html#learner', 'miniai/learner.py'),
                                'miniai.learner.Learner.__getattr__': ('learner.html#learner.__getattr__', 'miniai/learner.py'),
                                'miniai.learner.Learner.__init__': ('learner.html#learner.__init__', 'miniai/learner.py'),
                                'miniai.learner.Learner._fit': ('learner.html#learner._fit', 'miniai/learner.py'),
                                'miniai.learner.Learner._one_batch': ('learner.html#learner._one_batch', 'miniai/learner.py'),
                                'miniai.learner.Learner._one_epoch': ('learner.html#learner._one_epoch', 'miniai/learner.py'),
                                'miniai.learner.Learner.callback': ('learner.html#learner.callback', 'miniai/learner.py'),
                                'miniai.learner.Learner.fit': ('learner.html#learner.fit', 'miniai/learner.py'),
                                'miniai.learner.Learner.one_epoch': ('learner.html#learner.one_epoch', 'miniai/learner.py'),
                                'miniai.learner.Learner.training': ('learner.html#learner.training', 'miniai/learner.py'),
                                'miniai.learner.MetricsCB': ('learner.html#metricscb', 'miniai/learner.py'),
                                'miniai.learner.MetricsCB.__init__': ('learner.html#metricscb.__init__', 'miniai/learner.py'),
                                'miniai.learner.MetricsCB._log': ('learner.html#metricscb._log', 'miniai/learner.py'),
                                'miniai.learner.MetricsCB.after_batch': ('learner.html#metricscb.after_batch', 'miniai/learner.py'),
                                'miniai.learner.MetricsCB.after_epoch': ('learner.html#metricscb.after_epoch', 'miniai/learner.py'),
                                'miniai.learner.MetricsCB.before_epoch': ('learner.html#metricscb.before_epoch', 'miniai/learner.py'),
                                'miniai.learner.MetricsCB.before_fit': ('learner.html#metricscb.before_fit', 'miniai/learner.py'),
                                'miniai.learner.MomentumLearner': ('learner.html#momentumlearner', 'miniai/learner.py'),
                                'miniai.learner.MomentumLearner.__init__': ('learner.html#momentumlearner.__init__', 'miniai/learner.py'),
                                'miniai.learner.MomentumLearner.zero_grad': ('learner.html#momentumlearner.zero_grad', 'miniai/learner.py'),
                                'miniai.learner.ProgressCB': ('learner.html#progresscb', 'miniai/learner.py'),
                                'miniai.learner.ProgressCB.__init__': ('learner.html#progresscb.__init__', 'miniai/learner.py'),
                                'miniai.learner.ProgressCB._log': ('learner.html#progresscb._log', 'miniai/learner.py'),
                                'miniai.learner.ProgressCB.after_batch': ('learner.html#progresscb.after_batch', 'miniai/learner.py'),
                                'miniai.learner.ProgressCB.before_epoch': ('learner.html#progresscb.before_epoch', 'miniai/learner.py'),
                                'miniai.learner.ProgressCB.before_fit': ('learner.html#progresscb.before_fit', 'miniai/learner.py'),
                                'miniai.learner.SingleBatchCB': ('learner.html#singlebatchcb', 'miniai/learner.py'),
                                'miniai.learner.SingleBatchCB.after_batch': ('learner.html#singlebatchcb.after_batch', 'miniai/learner.py'),
                                'miniai.learner.TrainCB': ('learner.html#traincb', 'miniai/learner.py'),
                                'miniai.learner.TrainCB.__init__': ('learner.html#traincb.__init__', 'miniai/learner.py'),
                                'miniai.learner.TrainCB.backward': ('learner.html#traincb.backward', 'miniai/learner.py'),
                                'miniai.learner.TrainCB.get_loss': ('learner.html#traincb.get_loss', 'miniai/learner.py'),
                                'miniai.learner.TrainCB.predict': ('learner.html#traincb.predict', 'miniai/learner.py'),
                                'miniai.learner.TrainCB.step': ('learner.html#traincb.step', 'miniai/learner.py'),
                                'miniai.learner.TrainCB.zero_grad': ('learner.html#traincb.zero_grad', 'miniai/learner.py'),
                                'miniai.learner.TrainLearner': ('learner.html#trainlearner', 'miniai/learner.py'),
                                'miniai.learner.TrainLearner.backward': ('learner.html#trainlearner.backward', 'miniai/learner.py'),
                                'miniai.learner.TrainLearner.get_loss': ('learner.html#trainlearner.get_loss', 'miniai/learner.py'),
                                'miniai.learner.TrainLearner.predict': ('learner.html#trainlearner.predict', 'miniai/learner.py'),
                                'miniai.learner.TrainLearner.step': ('learner.html#trainlearner.step', 'miniai/learner.py'),
                                'miniai.learner.TrainLearner.zero_grad': ('learner.html#trainlearner.zero_grad', 'miniai/learner.py'),
                                'miniai.learner.lr_find': ('learner.html#lr_find', 'miniai/learner.py'),
                                'miniai.learner.run_cbs': ('learner.html#run_cbs', 'miniai/learner.py'),
                                'miniai.learner.to_cpu': ('learner.html#to_cpu', 'miniai/learner.py'),
                                'miniai.learner.with_cbs': ('learner.html#with_cbs', 'miniai/learner.py'),
                                'miniai.learner.with_cbs.__call__': ('learner.html#with_cbs.__call__', 'miniai/learner.py'),
                                'miniai.learner.with_cbs.__init__': ('learner.html#with_cbs.__init__', 'miniai/learner.py')},
            'miniai.mixup': { 'miniai.mixup.MixUpCB': ('contest/mixup_dmce_int.html#mixupcb', 'miniai/mixup.py'),
                              'miniai.mixup.MixUpCB.__init__': ('contest/mixup_dmce_int.html#mixupcb.__init__', 'miniai/mixup.py'),
                              'miniai.mixup.MixUpCB.before_batch': ('contest/mixup_dmce_int.html#mixupcb.before_batch', 'miniai/mixup.py'),
                              'miniai.mixup.MixUpCB.before_epoch': ('contest/mixup_dmce_int.html#mixupcb.before_epoch', 'miniai/mixup.py'),
                              'miniai.mixup.MixUpCB.get_loss': ('contest/mixup_dmce_int.html#mixupcb.get_loss', 'miniai/mixup.py'),
                              'miniai.mixup.MixUpCB.sample': ('contest/mixup_dmce_int.html#mixupcb.sample', 'miniai/mixup.py'),
                              'miniai.mixup._soft_mix_cross_entropy': ( 'contest/mixup_dmce_int.html#_soft_mix_cross_entropy',
                                                                        'miniai/mixup.py'),
                              'miniai.mixup._weight_reduce_loss': ('contest/mixup_dmce_int.html#_weight_reduce_loss', 'miniai/mixup.py'),
                              'miniai.mixup.ce_masked': ('contest/mixup_dmce_int.html#ce_masked', 'miniai/mixup.py'),
                              'miniai.mixup.dmce': ('contest/mixup_dmce_int.html#dmce', 'miniai/mixup.py'),
                              'miniai.mixup.dmce_orig': ('contest/mixup_dmce_int.html#dmce_orig', 'miniai/mixup.py'),
                              'miniai.mixup.mce_int': ('contest/mixup_dmce_int.html#mce_int', 'miniai/mixup.py'),
                              'miniai.mixup.mixup_criterion_per_batch': ( 'contest/mixup_dmce_int.html#mixup_criterion_per_batch',
                                                                          'miniai/mixup.py'),
                              'miniai.mixup.mixup_data_int': ('contest/mixup_dmce_int.html#mixup_data_int', 'miniai/mixup.py'),
                              'miniai.mixup.mixup_data_per_batch': ('contest/mixup_dmce_int.html#mixup_data_per_batch', 'miniai/mixup.py')},
            'miniai.mixup_old': { 'miniai.mixup_old.CapturePreds': ('contest/mixup.html#capturepreds', 'miniai/mixup_old.py'),
                                  'miniai.mixup_old.CapturePreds.after_batch': ( 'contest/mixup.html#capturepreds.after_batch',
                                                                                 'miniai/mixup_old.py'),
                                  'miniai.mixup_old.CapturePreds.after_fit': ( 'contest/mixup.html#capturepreds.after_fit',
                                                                               'miniai/mixup_old.py'),
                                  'miniai.mixup_old.CapturePreds.before_fit': ( 'contest/mixup.html#capturepreds.before_fit',
                                                                                'miniai/mixup_old.py'),
                                  'miniai.mixup_old.capture_preds': ('contest/mixup.html#capture_preds', 'miniai/mixup_old.py')},
            'miniai.mixup_tta': { 'miniai.mixup_tta.MixUpCB': ('contest/mixup_tta.html#mixupcb', 'miniai/mixup_tta.py'),
                                  'miniai.mixup_tta.MixUpCB.__init__': ('contest/mixup_tta.html#mixupcb.__init__', 'miniai/mixup_tta.py'),
                                  'miniai.mixup_tta.MixUpCB.before_batch': ( 'contest/mixup_tta.html#mixupcb.before_batch',
                                                                             'miniai/mixup_tta.py'),
                                  'miniai.mixup_tta.MixUpCB.before_epoch': ( 'contest/mixup_tta.html#mixupcb.before_epoch',
                                                                             'miniai/mixup_tta.py'),
                                  'miniai.mixup_tta.MixUpCB.get_loss': ('contest/mixup_tta.html#mixupcb.get_loss', 'miniai/mixup_tta.py'),
                                  'miniai.mixup_tta.MixUpCB.sample': ('contest/mixup_tta.html#mixupcb.sample', 'miniai/mixup_tta.py'),
                                  'miniai.mixup_tta._soft_mix_cross_entropy': ( 'contest/mixup_tta.html#_soft_mix_cross_entropy',
                                                                                'miniai/mixup_tta.py'),
                                  'miniai.mixup_tta._weight_reduce_loss': ( 'contest/mixup_tta.html#_weight_reduce_loss',
                                                                            'miniai/mixup_tta.py'),
                                  'miniai.mixup_tta.ce_masked': ('contest/mixup_tta.html#ce_masked', 'miniai/mixup_tta.py'),
                                  'miniai.mixup_tta.dmce': ('contest/mixup_tta.html#dmce', 'miniai/mixup_tta.py'),
                                  'miniai.mixup_tta.dmce_orig': ('contest/mixup_tta.html#dmce_orig', 'miniai/mixup_tta.py'),
                                  'miniai.mixup_tta.mixup_criterion_per_batch': ( 'contest/mixup_tta.html#mixup_criterion_per_batch',
                                                                                  'miniai/mixup_tta.py'),
                                  'miniai.mixup_tta.mixup_data_int': ('contest/mixup_tta.html#mixup_data_int', 'miniai/mixup_tta.py'),
                                  'miniai.mixup_tta.mixup_data_per_batch': ( 'contest/mixup_tta.html#mixup_data_per_batch',
                                                                             'miniai/mixup_tta.py')},
            'miniai.mps': { 'miniai.mps.ReseedCB': ('mps.html#reseedcb', 'miniai/mps.py'),
                            'miniai.mps.ReseedCB.__init__': ('mps.html#reseedcb.__init__', 'miniai/mps.py'),
                            'miniai.mps.ReseedCB.before_fit': ('mps.html#reseedcb.before_fit', 'miniai/mps.py'),
                            'miniai.mps.ReseedCB.new': ('mps.html#reseedcb.new', 'miniai/mps.py'),
                            'miniai.mps.ReseedCB.previous': ('mps.html#reseedcb.previous', 'miniai/mps.py'),
                            'miniai.mps.ReseedCB.set_seed': ('mps.html#reseedcb.set_seed', 'miniai/mps.py'),
                            'miniai.mps.init_weights': ('mps.html#init_weights', 'miniai/mps.py')},
            'miniai.resnet': { 'miniai.resnet.ResBlock': ('resnet.html#resblock', 'miniai/resnet.py'),
                               'miniai.resnet.ResBlock.__init__': ('resnet.html#resblock.__init__', 'miniai/resnet.py'),
                               'miniai.resnet.ResBlock.forward': ('resnet.html#resblock.forward', 'miniai/resnet.py'),
                               'miniai.resnet._conv_block': ('resnet.html#_conv_block', 'miniai/resnet.py')},
            'miniai.sgd': { 'miniai.sgd.BaseSchedCB': ('accel_sgd.html#baseschedcb', 'miniai/sgd.py'),
                            'miniai.sgd.BaseSchedCB.__init__': ('accel_sgd.html#baseschedcb.__init__', 'miniai/sgd.py'),
                            'miniai.sgd.BaseSchedCB._step': ('accel_sgd.html#baseschedcb._step', 'miniai/sgd.py'),
                            'miniai.sgd.BaseSchedCB.before_fit': ('accel_sgd.html#baseschedcb.before_fit', 'miniai/sgd.py'),
                            'miniai.sgd.BatchSchedCB': ('accel_sgd.html#batchschedcb', 'miniai/sgd.py'),
                            'miniai.sgd.BatchSchedCB.after_batch': ('accel_sgd.html#batchschedcb.after_batch', 'miniai/sgd.py'),
                            'miniai.sgd.EpochSchedCB': ('accel_sgd.html#epochschedcb', 'miniai/sgd.py'),
                            'miniai.sgd.EpochSchedCB.after_epoch': ('accel_sgd.html#epochschedcb.after_epoch', 'miniai/sgd.py'),
                            'miniai.sgd.HasLearnCB': ('accel_sgd.html#haslearncb', 'miniai/sgd.py'),
                            'miniai.sgd.HasLearnCB.after_fit': ('accel_sgd.html#haslearncb.after_fit', 'miniai/sgd.py'),
                            'miniai.sgd.HasLearnCB.before_fit': ('accel_sgd.html#haslearncb.before_fit', 'miniai/sgd.py'),
                            'miniai.sgd.RecorderCB': ('accel_sgd.html#recordercb', 'miniai/sgd.py'),
                            'miniai.sgd.RecorderCB.__init__': ('accel_sgd.html#recordercb.__init__', 'miniai/sgd.py'),
                            'miniai.sgd.RecorderCB.after_batch': ('accel_sgd.html#recordercb.after_batch', 'miniai/sgd.py'),
                            'miniai.sgd.RecorderCB.before_fit': ('accel_sgd.html#recordercb.before_fit', 'miniai/sgd.py'),
                            'miniai.sgd.RecorderCB.plot': ('accel_sgd.html#recordercb.plot', 'miniai/sgd.py')},
            'miniai.stability': {},
            'miniai.timm_sup': {},
            'miniai.tmp': { 'miniai.tmp.CapturePreds': ('contest/ct_curriculum/ct94.9_rerun.html#capturepreds', 'miniai/tmp.py'),
                            'miniai.tmp.CapturePreds.after_batch': ( 'contest/ct_curriculum/ct94.9_rerun.html#capturepreds.after_batch',
                                                                     'miniai/tmp.py'),
                            'miniai.tmp.CapturePreds.after_fit': ( 'contest/ct_curriculum/ct94.9_rerun.html#capturepreds.after_fit',
                                                                   'miniai/tmp.py'),
                            'miniai.tmp.CapturePreds.before_fit': ( 'contest/ct_curriculum/ct94.9_rerun.html#capturepreds.before_fit',
                                                                    'miniai/tmp.py'),
                            'miniai.tmp.capture_preds': ('contest/ct_curriculum/ct94.9_rerun.html#capture_preds', 'miniai/tmp.py')},
            'miniai.training': { 'miniai.training.Dataset': ('minibatch_training.html#dataset', 'miniai/training.py'),
                                 'miniai.training.Dataset.__getitem__': ( 'minibatch_training.html#dataset.__getitem__',
                                                                          'miniai/training.py'),
                                 'miniai.training.Dataset.__init__': ('minibatch_training.html#dataset.__init__', 'miniai/training.py'),
                                 'miniai.training.Dataset.__len__': ('minibatch_training.html#dataset.__len__', 'miniai/training.py'),
                                 'miniai.training.accuracy': ('minibatch_training.html#accuracy', 'miniai/training.py'),
                                 'miniai.training.fit': ('minibatch_training.html#fit', 'miniai/training.py'),
                                 'miniai.training.get_dls': ('minibatch_training.html#get_dls', 'miniai/training.py'),
                                 'miniai.training.report': ('minibatch_training.html#report', 'miniai/training.py')},
            'miniai.utils': { 'miniai.utils.LazyMean': ('utils.html#lazymean', 'miniai/utils.py'),
                              'miniai.utils.LazyMean.__init__': ('utils.html#lazymean.__init__', 'miniai/utils.py'),
                              'miniai.utils.LazyMean.compute': ('utils.html#lazymean.compute', 'miniai/utils.py'),
                              'miniai.utils.LazyMean.reset': ('utils.html#lazymean.reset', 'miniai/utils.py'),
                              'miniai.utils.LazyMean.to': ('utils.html#lazymean.to', 'miniai/utils.py'),
                              'miniai.utils.LazyMean.update': ('utils.html#lazymean.update', 'miniai/utils.py'),
                              'miniai.utils.LazyMetricsCB': ('utils.html#lazymetricscb', 'miniai/utils.py'),
                              'miniai.utils.LazyMetricsCB.__init__': ('utils.html#lazymetricscb.__init__', 'miniai/utils.py'),
                              'miniai.utils.LazyMetricsCB._log': ('utils.html#lazymetricscb._log', 'miniai/utils.py'),
                              'miniai.utils.LazyMetricsCB.after_batch': ('utils.html#lazymetricscb.after_batch', 'miniai/utils.py'),
                              'miniai.utils.LazyMetricsCB.after_epoch': ('utils.html#lazymetricscb.after_epoch', 'miniai/utils.py'),
                              'miniai.utils.LazyMetricsCB.before_epoch': ('utils.html#lazymetricscb.before_epoch', 'miniai/utils.py'),
                              'miniai.utils.LazyMetricsCB.before_fit': ('utils.html#lazymetricscb.before_fit', 'miniai/utils.py'),
                              'miniai.utils.LazyProgressCB': ('utils.html#lazyprogresscb', 'miniai/utils.py'),
                              'miniai.utils.LazyProgressCB.__init__': ('utils.html#lazyprogresscb.__init__', 'miniai/utils.py'),
                              'miniai.utils.LazyProgressCB._log': ('utils.html#lazyprogresscb._log', 'miniai/utils.py'),
                              'miniai.utils.LazyProgressCB.after_batch': ('utils.html#lazyprogresscb.after_batch', 'miniai/utils.py'),
                              'miniai.utils.LazyProgressCB.before_epoch': ('utils.html#lazyprogresscb.before_epoch', 'miniai/utils.py'),
                              'miniai.utils.LazyProgressCB.before_fit': ('utils.html#lazyprogresscb.before_fit', 'miniai/utils.py'),
                              'miniai.utils.RNGSeedCB': ('utils.html#rngseedcb', 'miniai/utils.py'),
                              'miniai.utils.RNGSeedCB.__init__': ('utils.html#rngseedcb.__init__', 'miniai/utils.py'),
                              'miniai.utils.RNGSeedCB.before_fit': ('utils.html#rngseedcb.before_fit', 'miniai/utils.py'),
                              'miniai.utils.RNGSeedCB.new': ('utils.html#rngseedcb.new', 'miniai/utils.py'),
                              'miniai.utils.RNGSeedCB.previous': ('utils.html#rngseedcb.previous', 'miniai/utils.py'),
                              'miniai.utils.RNGSeedCB.set_seed': ('utils.html#rngseedcb.set_seed', 'miniai/utils.py'),
                              'miniai.utils.TimeItCB': ('utils.html#timeitcb', 'miniai/utils.py'),
                              'miniai.utils.TimeItCB.__init__': ('utils.html#timeitcb.__init__', 'miniai/utils.py'),
                              'miniai.utils.TimeItCB.after_batch': ('utils.html#timeitcb.after_batch', 'miniai/utils.py'),
                              'miniai.utils.TimeItCB.after_epoch': ('utils.html#timeitcb.after_epoch', 'miniai/utils.py'),
                              'miniai.utils.TimeItCB.after_fit': ('utils.html#timeitcb.after_fit', 'miniai/utils.py'),
                              'miniai.utils.TimeItCB.before_batch': ('utils.html#timeitcb.before_batch', 'miniai/utils.py'),
                              'miniai.utils.TimeItCB.before_epoch': ('utils.html#timeitcb.before_epoch', 'miniai/utils.py'),
                              'miniai.utils.TimeItCB.before_fit': ('utils.html#timeitcb.before_fit', 'miniai/utils.py'),
                              'miniai.utils.TimeItCB.print_stats': ('utils.html#timeitcb.print_stats', 'miniai/utils.py'),
                              'miniai.utils.TimeItCB.reset': ('utils.html#timeitcb.reset', 'miniai/utils.py'),
                              'miniai.utils.TimeItCB.tick': ('utils.html#timeitcb.tick', 'miniai/utils.py'),
                              'miniai.utils._format_stats': ('utils.html#_format_stats', 'miniai/utils.py'),
                              'miniai.utils._with_features': ('utils.html#_with_features', 'miniai/utils.py'),
                              'miniai.utils.cache_dataset_as_dict': ('utils.html#cache_dataset_as_dict', 'miniai/utils.py')}}}
